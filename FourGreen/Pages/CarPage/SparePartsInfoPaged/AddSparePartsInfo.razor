@page "/addsparepartsinfo"
@inject NavigationManager NavigationManager
@inject ISparePartBrandsActions SparePartBrandsActions
@inject ISparePartsActions SparePartsActions
@inject ISparePartsInfoActions SparePartsInfoActions
@inject IConfiguration config
@inject IMessageService _messege
@inject ImageRepositorys imageRepository
<h3>Запчаст Қўшиш</h3>
@if (sparePartsInfo != null)
{
    <Microsoft.AspNetCore.Components.Forms.EditForm Model="sparePartsInfo" >
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="from-group">
            <div style="display:flex; justify-content:space-between">
                <label style="font-family: 'Bookman Old Style'" for="city">Расмлар</label>
                <Microsoft.AspNetCore.Components.Forms.InputFile id="files" OnChange="LoadFiles" />
            </div>
            @foreach (var item in sparePartsInfoImages)
            {
                <img src="@item.ImageURl" width="100" height="100" style="border: black 3px solid; margin-right: 10px; margin-bottom: 7px" />

            }
        </div>
        <div class="from-group">
            <label style="font-family: 'Bookman Old Style'" for="city">Брeнд номи</label>
            <select id="city" @bind="sparePartsInfo.SparePartBrandsConnectedId" class="form-control">
                <option selected></option>
                @foreach (var item in sparePartBrands)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
        </div>
        <div class="from-group">
            <label style="font-family: 'Bookman Old Style'" for="city">Запчаст Тури</label>
            <select id="city" @bind="sparePartsInfo.SparePartsConnectedId" class="form-control">
                <option selected></option>
                @foreach (var item in spareParts)
                {
                    <option value="@item.SparePartsId">@item.SparePartsName</option>
                }
            </select>
        </div>
        <div class="from-group">
            <label style="font-family: 'Bookman Old Style'" for="name">Запчаст Номи</label>
            <InputText id="name" @bind-Value="sparePartsInfo.SparePartsInfoName" class="form-control"></InputText>
        </div>

        <div class="from-group">
            <label style="font-family: 'Bookman Old Style'" for="name">Каталoг рақами</label>
            <Input id="name" @bind-Value="sparePartsInfo.CatologNumber" class="form-control"></Input>
        </div>

        <div class="from-group">
            <label style="font-family: 'Bookman Old Style'" for="name">Запчаст Сони</label>
            <Microsoft.AspNetCore.Components.Forms.InputNumber id="name" @bind-Value="sparePartsInfo.Quntity" class="form-control"></Microsoft.AspNetCore.Components.Forms.InputNumber>
        </div>
     
        <div class="from-group">
            <label style="font-family: 'Bookman Old Style'" for="name">Запчаст Нархи</label>
            <Microsoft.AspNetCore.Components.Forms.InputNumber id="name" @bind-Value="sparePartsInfo.Price" class="form-control"></Microsoft.AspNetCore.Components.Forms.InputNumber>
        </div>
        <br>
        <button type="submit" class="btn" style="background-color: #80DF95;  margin-right: 10px;" @onclick="Submit">Сақлаш</button>
        <button type="button" class="btn" style="background-color: #F78C8C;" @onclick="Cancel">Бекор қилиш</button>
    </Microsoft.AspNetCore.Components.Forms.EditForm>

}


@code {
    List<SparePartsInfoImage> sparePartsInfoImages = new List<SparePartsInfoImage>();
    private SparePartsInfo? sparePartsInfo;

    private decimal star;
    private IEnumerable<SpareParts>? spareParts;
    private IEnumerable<SparePartBrands>? sparePartBrands;
    int sparePartsInfoIdForImages;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        sparePartsInfo = new SparePartsInfo();
        sparePartBrands = SparePartBrandsActions.View();
        spareParts = SparePartsActions.View();
        StateHasChanged();

    }

    private void Submit()
    {
        sparePartsInfoIdForImages = SparePartsInfoActions.Add(sparePartsInfo);
        foreach (var item in sparePartsInfoImages)
        {
            item.SparePartsInfoConnectId = sparePartsInfoIdForImages;
            imageRepository.AddImage(item);
        }
        NavigationManager.NavigateTo("/sparepartsinfo");
        StateHasChanged();

    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/sparepartsinfo");
    }

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 3;

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                var isJpgOrPng = file.Name.EndsWith("jpeg") || file.Name.EndsWith("png") || file.Name.EndsWith("jpg");

                if (file.Size < maxSize)
                {
                    if (isJpgOrPng)
                    {
                        string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
                        string path = Path.Combine(config.GetValue<string>("FileStorage")!, "uploadimages", newFileName);

                        Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "uploadimages"));

                        await using FileStream fs = new(path, FileMode.Append);
                        await file.OpenReadStream(maxSize).CopyToAsync(fs);

                        SparePartsInfoImage image = new SparePartsInfoImage
                            {
                                ImageURl = $"/uploadimages/{newFileName}",
                                ImageName = newFileName,
                            };
                        sparePartsInfoImages.Add(image);
                        //apply.PhotoPath = $"https://localhost:44349/uploadimages/{newFileName}";

                    }
                    else
                        await _messege.Error("Вы можете загружать только JPG/PNG файл!");
                }
                else
                    await _messege.Error("Вы не можете загружать файл более 3 мб!");
            }
            catch (Exception ex)
            {
                await _messege.Error(ex.Message);
            }
        }
    }
}

                    