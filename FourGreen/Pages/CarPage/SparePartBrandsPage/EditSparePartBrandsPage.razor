@page "/editsparepartbrands/{BrandsId}"
@inject NavigationManager NavigationManager
@inject ISparePartBrandsActions SparePartBrandsActions
@inject IConfiguration config
@inject IMessageService _messege
@inject ModalService _modalService
@inject BrandImage brandImage

<h3>Брeнд Ўзгартириш</h3>
@if (sparePartBrands != null)
{
    <Microsoft.AspNetCore.Components.Forms.EditForm Model="sparePartBrands">
        <ValidationSummary></ValidationSummary>
        <div class="from-group">
            <div style="display:flex; justify-content:space-between">
                <label style="font-family: 'Bookman Old Style'" for="city">Расмлар</label>
                <Microsoft.AspNetCore.Components.Forms.InputFile id="files" OnChange="LoadFiles" />
            </div>
            @foreach (var item in images)
            {
                <div class="image-container" @onmouseleave="e=>HideDeleteButton(item.Id)" @onmouseover="e=>ShowDeleteButton(item.Id)">
                    <img style="border: black 3px solid; margin-right:5px;" src="@item.ImageURl" width="100" height="100" />
                    <Button Class="delete-button" OnClick="()=>ShowDeleteConfirm(item)">
                        <Icon Type="delete" Theme="outline" />
                    </Button>
                </div>
            }
        </div>

        <div class="from-group">
            <label class="name">Брeндлар номи</label>
            <InputText id="name" @bind-Value="sparePartBrands.Name" class="form-control" />
        </div>
        <br />

        <button type="submit" class="btn" style="background-color: #80DF95; margin-right: 10px;" @onclick="Submit">Сақлаш</button>
        <button type="button" class="btn" style="background-color: #F78C8C;" @onclick="OnCancel">Бекор қилиш</button>
    </Microsoft.AspNetCore.Components.Forms.EditForm>
}

@code {
    [Parameter]
    public string BrandsId { get; set; }
    private SparePartBrands sparePartBrands;
    bool isDeleteButton;
    int hoverId;
    string title = "Delete Image";
    bool _visible = false;

    List<SparePartBrandsImage> images = new List<SparePartBrandsImage>();
    List<SparePartBrandsImage> newimages = new List<SparePartBrandsImage>();
    List<SparePartBrandsImage> deleteimages = new List<SparePartBrandsImage>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(this.BrandsId, out int IBrandsId))
        {
            var brand = SparePartBrandsActions.GetSparePartBrandsId(IBrandsId);
            this.sparePartBrands = new SparePartBrands
                    {
                        Id = brand.Id,
                        Name = brand.Name,
                        sparePartBrandsImages = brand.sparePartBrandsImages
                    };
            images = brandImage.GetBySparePartBrandsId(IBrandsId);
        }
        StateHasChanged();
    }

    RenderFragment icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;
    private void ShowDeleteConfirm(SparePartBrandsImage sparePartBrandsImage)
    {
        deleteimages.Clear();

        _modalService.Confirm(new ConfirmOptions()
            {
                Title = "Are you sure delete this image?",
                Icon = icon,
                OnOk = e => { DeleteImage(sparePartBrandsImage); StateHasChanged(); return Task.CompletedTask; },
                OkType = "danger",
            });
        StateHasChanged();
    }

    private void Submit()
    {
        @foreach (var item in newimages)
        {
            item.SparePartBrandId = sparePartBrands.Id;
            brandImage.AddImage(item);
        }
        @foreach (var item in deleteimages)
        {
            brandImage.DeleteImage(item.Id);
            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "uploadimages", item.ImageName);
            File.Delete(path);
        }
        SparePartBrandsActions.Edit(this.sparePartBrands);
        NavigationManager.NavigateTo("/sparepartbrands");
        StateHasChanged();
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/sparepartbrands");
        StateHasChanged();
    }

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        long maxSize = 1024 * 1024 * 3;

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                var isJpgOrPng = file.Name.EndsWith("jpeg") || file.Name.EndsWith("png") || file.Name.EndsWith("jpg");

                if (file.Size < maxSize)
                {
                    if (isJpgOrPng)
                    {
                        string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
                        string path = Path.Combine(config.GetValue<string>("FileStorage")!, "uploadimages", newFileName);

                        Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "uploadimages"));

                        await using FileStream fs = new(path, FileMode.Append);
                        await file.OpenReadStream(maxSize).CopyToAsync(fs);

                        SparePartBrandsImage image = new SparePartBrandsImage
                            {
                                ImageURl = $"/uploadimages/{newFileName}",
                                ImageName = newFileName,
                            };
                        newimages.Add(image);
                        images.Add(image);
                        //apply.PhotoPath = $"https://localhost:44349/uploadimages/{newFileName}";

                    }
                    else
                        await _messege.Error("Вы можете загружать только JPG/PNG файл!");
                }
                else
                    await _messege.Error("Вы не можете загружать файл более 3 мб!");
            }
            catch (Exception ex)
            {
                await _messege.Error(ex.Message);
            }
        }
        StateHasChanged();

    }

    void ShowDeleteButton(int id)
    {
        hoverId = id;
        isDeleteButton = true;
        StateHasChanged();
    }
    void HideDeleteButton(int id)
    {
        hoverId = 0;
        isDeleteButton = false;
        StateHasChanged();
    }
    void DeleteImage(SparePartBrandsImage sparePartBrandsImage)
    {
        images.Remove(sparePartBrandsImage);
        deleteimages.Add(sparePartBrandsImage);

        StateHasChanged();
    }
}

<style>

    .image-container {
        position: relative;
        display: inline-block;
    }

    .delete-button {
        display: none;
        position: absolute;
        top: 50px;
        padding: 5px;
        right: 50px;
        transform: translate(50%, -50%);
        background-color: red;
        color: white;
        border: black 3px solid;
        border-radius: 10px;
        width: 35px;
        height: 35px;
        cursor: pointer;
    }

        .delete-button:hover {
            background-color: red;
            color: white;
            border: black 3px solid;
        }

        .delete-button p {
            width: 100%;
            height: auto;
        }

    .image-container:hover .delete-button {
        display: block;
    }

    .image-container img {
        transition: filter 0.3s ease-in-out;
    }

    .image-container:hover img {
        filter: blur(2px);
    }

    .image-container:hover .delete-button img {
        filter: none;
    }
</style>