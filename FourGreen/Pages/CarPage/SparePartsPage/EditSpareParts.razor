@page "/editspareparts/{SparePartsId}"
@inject NavigationManager NavigationManager
@inject ISparePartsActions SparePartsActions
<h3>Запчаст Турини Ўзгартириш</h3>

@if (spareParts != null)
{
    <EditForm Model="spareParts">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>


        <div class="from-group">
            <label class="name">Запчаст тури</label>
            <InputText id="name" @bind-Value="spareParts.SparePartsName" class="form-control" />
        </div>
        <br />

        <button type="submit" class="btn" @onclick="OnValidSubmit" style="background-color: #80DF95; margin-right: 10px;">Сақлаш</button>
        <button type="button" class="btn" style="background-color: #F78C8C;" @onclick="Cancel">Бекор қилиш</button>
    </EditForm>
}

@code {

    [Parameter]
    public string SparePartsId { get; set; }

    private SpareParts spareParts;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.SparePartsId, out int ISparePartsId))
        {
            var SpareParts = SparePartsActions.GetSparePartsId(ISparePartsId);
            this.spareParts = new SpareParts
                {
                    SparePartsId = SpareParts.SparePartsId,
                    SparePartsName = SpareParts.SparePartsName,
                };
        }

    }

    private void OnValidSubmit()
    {
        SparePartsActions.Edit(this.spareParts);
        NavigationManager.NavigateTo("spareparts");
        StateHasChanged();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("spareparts");
        StateHasChanged();
    }
}
